import logging
from random import randint
import os
import pytest
from test_data_generator import generate_N_numbers, NUMBERS_PATH

from my_oct import my_oct

LOGGER = logging.getLogger()

@pytest.fixture(params=[True, False])
def generate_single_number(request):
    if (request.param):
        return randint(0, 1000000)

    return randint(-1000000, 1000000)

@pytest.fixture()
def load_generated_numbers():
    numbers = []

    if not os.path.exists(NUMBERS_PATH):
        generate_N_numbers(1000000)

    with open(NUMBERS_PATH, "r") as file:
        for line in file:
            numbers.append(int(line))

    yield numbers


def test_single_number(generate_single_number):
    LOGGER.log(logging.INFO, "Generated number= %d", generate_single_number)
    oct_num = oct(generate_single_number)
    my_oct_num = my_oct(generate_single_number)

    assert oct_num == my_oct_num


def test_generated_numbers(load_generated_numbers):
    assert load_generated_numbers

    for number in load_generated_numbers:
        if oct(number) != my_oct(number):
            raise ValueError("Improper value generated by my_oct() %d", number)    
